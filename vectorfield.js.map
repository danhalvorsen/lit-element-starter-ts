{"version":3,"file":"vectorfield.js","sourceRoot":"","sources":["src/vectorfield.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC,CAAC,8CAA8C;AACvF,OAAO,EAAC,mBAAmB,EAAC,MAAM,4BAA4B,CAAC;AAGxD,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,UAAU;IAA3C;;QACG,SAAI,GAA2B,IAAI,UAAU,EAAE,CAAC,CAAC,yBAAyB;QAC1E,UAAK,GAAG,GAAG,CAAC;QAEZ,cAAS,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC;IA2HpD,CAAC;IA9GU,MAAM;QACb,OAAO,IAAI,CAAA,0CAA0C,CAAC;IACxD,CAAC;IAEQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,mCAAmC;QAClD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEQ,oBAAoB;QAC3B,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IACO,kBAAkB;QACxB,MAAM,OAAO,GAAG,GAAG,EAAE;YACnB,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAChE,CAAC,CAAC;QACF,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,iBAAiB;QACvB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IACO,gBAAgB,CAAC,KAAiB;QACxC,wCAAwC;QACxC,MAAM,KAAK,GAAW,IAAI,CAAC,GAAG,CAC5B,CAAC,CAAC,EACF,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAC3C,CAAC;QAEF,6CAA6C;QAC7C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACd,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,UAAU;QAC/B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,WAAW;QAChC,CAAC;QAED,uCAAuC;QACvC,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,MAAM;QACZ,qBAAqB;QACrB,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,cAAc,CAC5C,mBAAmB,CACQ,CAAC;QAC9B,IAAI,CAAC,MAAM;YAAE,OAAO;QAEpB,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,GAAG;YAAE,OAAO;QAEjB,eAAe;QACf,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAEjD,YAAY;QACZ,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAEtD,oBAAoB;QACpB,SAAS,eAAe,CACtB,mBAAqE,EACrE,IAAY;YAEZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAO,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;gBAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAO,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;oBAC9C,MAAM,MAAM,GAAG,mBAAmB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzC,GAAI,CAAC,SAAS,EAAE,CAAC;oBACjB,GAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAClB,GAAI,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACxC,GAAI,CAAC,WAAW,GAAG,OAAO,CAAC;oBAC3B,GAAI,CAAC,MAAM,EAAE,CAAC;oBACd,GAAI,CAAC,WAAW,GAAG,SAAS,CAAC;oBAC7B,GAAI,CAAC,WAAW,CAAC;oBACjB,GAAI,CAAC,MAAM,EAAE,CAAC;gBAChB,CAAC;YACH,CAAC;QACH,CAAC;QAED,+BAA+B;QAC/B,SAAS,qBAAqB,CAC5B,EAAU,EACV,EAAU;YAEV,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,eAAe,EAAE,CAAC;gBAE7C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CACtB,EAAE,GAAG,OAAO,GAAG,EAAE,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EACrC,EAAE,GAAG,OAAO,GAAG,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CACrC,CAAC;gBAEF,MAAM,SAAS,GAAG,EAAE,CAAC;gBACrB,MAAM,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC;gBACjD,MAAM,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC;gBACjD,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;gBACrD,OAAO,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;YACxB,CAAC;YACD,OAAO,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;QACtB,CAAC;QAED,oBAAoB;QACpB,eAAe,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;IAC7C,CAAC;;AAxHwB,yBAAM,GAAG,GAAG,CAAA;;;;;;;;;GASpC,AAT8B,CAS7B;AAfS,kBAAkB;IAD9B,aAAa,CAAC,eAAe,CAAC;GAClB,kBAAkB,CA+H9B","sourcesContent":["import {LitElement, html, css} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport {AxesDrawer} from './axisDrawer'; // Make sure the path to axisDrawer is correct\r\nimport {DrawGraphController} from './test/drawGraphController';\r\n\r\n@customElement('vector-canvas')\r\nexport class VectorFieldPlotter extends LitElement {\r\n  private axes: AxesDrawer | undefined = new AxesDrawer(); // Instantiate AxesDrawer\r\n  private scale = 1.0;\r\n  private animationFrameId: number | undefined;\r\n  private placement = new DrawGraphController(this);\r\n\r\n  static override readonly styles = css`\r\n    :host {\r\n      display: block;\r\n      border: 1px solid black;\r\n    }\r\n    canvas {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  `;\r\n\r\n  override render() {\r\n    return html`<canvas id=\"vectorFieldCanvas\"></canvas>`;\r\n  }\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.addEventListener('wheel', this.handleMouseWheel);\r\n    this.redraw(); // Ensure canvas is drawn initially\r\n    this.startAnimationLoop();\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.removeEventListener('wheel', this.handleMouseWheel);\r\n    this.stopAnimationLoop();\r\n  }\r\n  private startAnimationLoop(): void {\r\n    const animate = () => {\r\n      this.redraw();\r\n      this.animationFrameId = window.requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n  }\r\n\r\n  private stopAnimationLoop(): void {\r\n    if (this.animationFrameId) {\r\n      window.cancelAnimationFrame(this.animationFrameId);\r\n    }\r\n  }\r\n  private handleMouseWheel(event: WheelEvent): void {\r\n    // Determine the direction of the scroll\r\n    const delta: number = Math.max(\r\n      -1,\r\n      Math.min(1, event.deltaY || -event.detail)\r\n    );\r\n\r\n    // Adjust the scale based on scroll direction\r\n    if (delta > 0) {\r\n      this.scale *= 3.0; // Zoom in\r\n    } else {\r\n      this.scale *= 0.1; // Zoom out\r\n    }\r\n\r\n    // Redraw the canvas with the new scale\r\n    this.redraw();\r\n  }\r\n\r\n  private redraw(): void {\r\n    // Get canvas element\r\n    const canvas = this.shadowRoot?.getElementById(\r\n      'vectorFieldCanvas'\r\n    ) as HTMLCanvasElement | null;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw axes\r\n    this.axes?.setValues(ctx, canvas.width, canvas.height);\r\n    this.axes?.drawAxes(ctx, canvas.width, canvas.height);\r\n\r\n    // Plot vector field\r\n    function plotVectorField(\r\n      vectorFieldFunction: (x: number, y: number) => {x: number; y: number},\r\n      step: number\r\n    ) {\r\n      for (let x = 0; x < canvas!.width; x += step) {\r\n        for (let y = 0; y < canvas!.height; y += step) {\r\n          const vector = vectorFieldFunction(x, y);\r\n          ctx!.beginPath();\r\n          ctx!.moveTo(x, y);\r\n          ctx!.lineTo(x + vector.x, y + vector.y);\r\n          ctx!.strokeStyle = 'black';\r\n          ctx!.stroke();\r\n          ctx!.strokeStyle = '#ff00ff';\r\n          ctx!.strokeStyle;\r\n          ctx!.stroke();\r\n        }\r\n      }\r\n    }\r\n\r\n    // Define vector field function\r\n    function rotationalVectorField(\r\n      _x: number,\r\n      _y: number\r\n    ): {x: number; y: number} {\r\n      if (canvas) {\r\n        const seconds = new Date().getMilliseconds();\r\n\r\n        const angle = Math.atan2(\r\n          _y * seconds * 10 - canvas.height / 2,\r\n          _x * seconds * 10 - canvas.width / 2\r\n        );\r\n\r\n        const magnitude = 10;\r\n        const dx = magnitude * Math.cos(angle * seconds);\r\n        const dy = magnitude * Math.sin(angle * seconds);\r\n        console.log(`angle: ${angle}, dx: ${dx}, dy: ${dy}`);\r\n        return {x: dx, y: dy};\r\n      }\r\n      return {x: 0, y: 0};\r\n    }\r\n\r\n    // Plot vector field\r\n    plotVectorField(rotationalVectorField, 20);\r\n  }\r\n}\r\n"]}