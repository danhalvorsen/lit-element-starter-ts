{"version":3,"file":"vector.js","sourceRoot":"","sources":["src/vector.ts"],"names":[],"mappings":"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","sourcesContent":["import Matrix2D from './Matrix2D';\r\n\r\nclass Vector2D {\r\n  public static add(vector1: Vector2D, vector2: Vector2D): Vector2D {\r\n    return new Vector2D(vector1.x + vector2.x, vector1.y + vector2.y);\r\n  }\r\n\r\n  public static subtract(vector1: Vector2D, vector2: Vector2D): Vector2D {\r\n    return new Vector2D(vector1.x - vector2.x, vector1.y - vector2.y);\r\n  }\r\n\r\n  public static subtractValue(vector: Vector2D, value: number): Vector2D {\r\n    return new Vector2D(vector.x - value, vector.y - value);\r\n  }\r\n\r\n  public static multiply(vector: Vector2D, value: number): Vector2D {\r\n    return new Vector2D(vector.x * value, vector.y * value);\r\n  }\r\n\r\n  public static divide(vector: Vector2D, value: number): Vector2D {\r\n    return new Vector2D(vector.x / value, vector.y / value);\r\n  }\r\n\r\n  public static equals(vector1: Vector2D, vector2: Vector2D): boolean {\r\n    return vector1.x === vector2.x && vector1.y === vector2.y;\r\n  }\r\n\r\n  public static equalsRounded(\r\n    vector1: Vector2D,\r\n    vector2: Vector2D,\r\n    roundingFactor = 12\r\n  ): boolean {\r\n    const vector = Vector2D.abs(Vector2D.subtract(vector1, vector2));\r\n    if (vector.x < roundingFactor && vector.y < roundingFactor) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Normalizes the vector if it matches a certain condition\r\n   */\r\n  public static normalize(vector: Vector2D): Vector2D {\r\n    const length = vector.length;\r\n    if (length > 2.220446049250313e-16) {\r\n      // Epsilon\r\n      return Vector2D.divide(vector, length);\r\n    }\r\n\r\n    return vector;\r\n  }\r\n\r\n  /**\r\n   * Adjusts x and y so that the length of the vector does not exceed max\r\n   */\r\n  public static truncate(vector: Vector2D, max: number): Vector2D {\r\n    if (vector.length > max) {\r\n      return Vector2D.multiply(Vector2D.normalize(vector), max);\r\n    }\r\n\r\n    return vector;\r\n  }\r\n\r\n  /**\r\n   * The vector that is perpendicular to this one\r\n   */\r\n  public static perp(vector: Vector2D): Vector2D {\r\n    return new Vector2D(-vector.y, vector.x);\r\n  }\r\n\r\n  /**\r\n   * returns the vector that is the reverse of this vector\r\n   */\r\n  public static reverse(vector: Vector2D): Vector2D {\r\n    return new Vector2D(-vector.x, -vector.y);\r\n  }\r\n\r\n  public static abs(vector: Vector2D): Vector2D {\r\n    return new Vector2D(Math.abs(vector.x), Math.abs(vector.y));\r\n  }\r\n\r\n  /**\r\n   * The dot product of v1 and v2\r\n   */\r\n  public static dot(vector1: Vector2D, vector2: Vector2D): number {\r\n    return vector1.x * vector2.x + vector1.y * vector2.y;\r\n  }\r\n\r\n  /**\r\n   * The distance between this and the vector\r\n   */\r\n  public static distance(vector1: Vector2D, vector2: Vector2D): number {\r\n    const ySeparation = vector2.y - vector1.y;\r\n    const xSeparation = vector2.x - vector1.x;\r\n    return Math.sqrt(ySeparation * ySeparation + xSeparation * xSeparation);\r\n  }\r\n\r\n  /**\r\n   * The distance between this and the vector squared\r\n   */\r\n  public static distanceSq(vector1: Vector2D, vector2: Vector2D): number {\r\n    const ySeparation = vector2.y - vector1.y;\r\n    const xSeparation = vector2.x - vector1.x;\r\n    return ySeparation * ySeparation + xSeparation * xSeparation;\r\n  }\r\n\r\n  /**\r\n   * Returns positive if v2 is clockwise of this vector, negative if counterclockwise\r\n   * (assuming the Y axis is pointing down, X axis to right like a Window app)\r\n   */\r\n  public static sign(vector1: Vector2D, vector2: Vector2D): number {\r\n    if (vector1.y * vector2.x > vector1.x * vector2.y) {\r\n      return -1;\r\n    }\r\n\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the angle between origin and the given vector in radians\r\n   * @param vector\r\n   */\r\n  public static angle(vector: Vector2D): number {\r\n    const origin = new Vector2D(0, -1);\r\n    const radian = Math.acos(\r\n      Vector2D.dot(vector, origin) / (vector.length * origin.length)\r\n    );\r\n    return Vector2D.sign(vector, origin) === 1 ? Math.PI * 2 - radian : radian;\r\n  }\r\n\r\n  public static random(maxX: number, maxY: number): Vector2D {\r\n    const randX = Math.floor(Math.random() * maxX - maxX / 2);\r\n    const randY = Math.floor(Math.random() * maxY - maxY / 2);\r\n    return new Vector2D(randX, randY);\r\n  }\r\n\r\n  /**\r\n   * Transform vectors based on the current tranformation matrices: translation, rotation and scale\r\n   * @param vectors The vectors to transform\r\n   */\r\n  public static transform(\r\n    vector: Vector2D,\r\n    transformation: Matrix2D\r\n  ): Vector2D {\r\n    return Matrix2D.multiplyByVector(transformation, vector);\r\n  }\r\n\r\n  /**\r\n   * Transform vectors based on the current tranformation matrices: translation, rotation and scale\r\n   * @param vectors The vectors to transform\r\n   */\r\n  public static transformList(\r\n    vectors: Vector2D[],\r\n    transformation: Matrix2D\r\n  ): Vector2D[] {\r\n    return vectors.map((vector) =>\r\n      Matrix2D.multiplyByVector(transformation, vector)\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    public x: number = 0,\r\n    public y: number = 0,\r\n    public w: number = 1 // needed for matrix multiplication\r\n  ) {}\r\n\r\n  /**\r\n   * Check wether both x and y are zero\r\n   */\r\n  public zero(): void {\r\n    this.x = 0;\r\n    this.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Set x and y both to zero\r\n   */\r\n  public get isZero(): boolean {\r\n    return this.x === 0 && this.y === 0;\r\n  }\r\n\r\n  /**\r\n   * The length / magnitude of the vector\r\n   */\r\n  public get length(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * The squared length of the vector\r\n   */\r\n  public get lengthSq(): number {\r\n    return this.x * this.x + this.y * this.y;\r\n  }\r\n\r\n  /**\r\n   * Return the vector with rounded values\r\n   */\r\n  public get rounded(): Vector2D {\r\n    return new Vector2D(Math.round(this.x), Math.round(this.y));\r\n  }\r\n}\r\n\r\nexport default Vector2D;\r\n"]}