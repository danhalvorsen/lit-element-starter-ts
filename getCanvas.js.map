{"version":3,"file":"getCanvas.js","sourceRoot":"","sources":["src/getCanvas.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,IAAI,EAAC,MAAM,KAAK,CAAC;AAGrC;;;;;;;;;;GAUG;AACH,MAAM,UAAU,YAAY,CAC1B,OAAmB,EACnB,MAAyB;IAEzB,IAAI,CAAC,MAAM;QAAE,OAAO,SAAS,CAAC;IAE9B,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACpC,IAAI,CAAC,GAAG;QAAE,OAAO,SAAS,CAAC;IAE3B,eAAe;IACf,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACjD,OAAO,GAAG,CAAC;AACb,CAAC;AAGD,MAAM,UAAU,iBAAiB;IAC/B,OAAO,IAAI,CAAA,WAAW,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,CAAC;AACtD,CAAC","sourcesContent":["import {LitElement, html} from 'lit';\nimport {tCanvasRenderingContext2D} from './types';\n\n/**\n * Returns the 2D rendering context for the given canvas, or undefined if\n * there is no such context. The function is strongly typed, with the first\n * argument being a LitElement, and the second argument and return type being\n * a tCanvasRenderingContext2D.\n * @param {LitElement} element - The LitElement for which to get the canvas\n * @param {HTMLCanvasElement} canvas - The canvas element to get the context\n * for\n * @return {tCanvasRenderingContext2D | undefined} The 2D rendering context\n * for the canvas, or undefined if there is no such context\n */\nexport function DrawFragment(\n  element: LitElement,\n  canvas: HTMLCanvasElement\n): tCanvasRenderingContext2D | undefined {\n  if (!canvas) return undefined;\n\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return undefined;\n\n  // Clear canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  return ctx;\n}\n\n\nexport function rectangleTemplate(this: any) {\n  return html`<header>${this.article.title}</header>`;\n}\n"]}