{"version":3,"file":"DrawingCanvas.js","sourceRoot":"","sources":["src/DrawingCanvas.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport {LineCreator} from './visuals/LineCreator';\r\nimport {Point, TLine, TPoint} from './types';\r\nimport {RectangleCreator, RectangleProduct} from './visuals/RectangleCreator';\r\nimport {CartesianCoordinateSystemCreator} from './visuals/CartesianCoordinateSystemCreator';\r\nimport {translateAndFlipYaxis} from './TranslateAndFlipYaxis';\r\n\r\n// DrawingCanvas.ts\r\n\r\n@customElement('canvas-drawer')\r\nexport class DrawingCanvas extends LitElement {\r\n  // methods related to canvas drawing\r\n  private lineCreator!: LineCreator;\r\n  private rectangleCreator!: RectangleCreator;\r\n  private createCartesianCoordinateSystem!: CartesianCoordinateSystemCreator;\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.lineCreator = new LineCreator();\r\n    this.rectangleCreator = new RectangleCreator();\r\n    this.createCartesianCoordinateSystem =\r\n      new CartesianCoordinateSystemCreator();\r\n  }\r\n\r\n  override render() {\r\n    return html` <canvas id=\"newcanvas2\"></canvas> `;\r\n  }\r\n  // override createRenderRoot() {\r\n  //   return this;\r\n  // }\r\n  override firstUpdated() {\r\n    this.redraw();\r\n  }\r\n  redraw(): void {\r\n    const canvas = this.shadowRoot?.getElementById(\r\n      'newcanvas2'\r\n    ) as HTMLCanvasElement | null;\r\n\r\n    if (canvas === null || canvas === undefined) {\r\n      console.log('no canvas element found');\r\n      return;\r\n    }\r\n\r\n    const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d');\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n\r\n    translateAndFlipYaxis(ctx);\r\n\r\n    const xaxis: TLine = [\r\n      [-100, 0],\r\n      [100, 0],\r\n    ];\r\n    const yaxis: TLine = [\r\n      [0, -100],\r\n      [0, 100],\r\n    ];\r\n\r\n    this.createCartesianCoordinateSystem.create(xaxis, yaxis, ctx);\r\n\r\n    this.lineCreator.create(new Point(0, 0), new Point(100, 100), ctx);\r\n\r\n    ctx.beginPath();\r\n    ctx.fillStyle = 'rgb(200 0 0)';\r\n    ctx.fillRect(10, 10, 50, 50);\r\n    ctx.beginPath();\r\n    ctx.fillStyle = 'rgb(0 0 200 / 50%)';\r\n    ctx.fillRect(30, 30, 50, 50);\r\n  }\r\n}\r\n\r\nfunction calculatePointCoordinate(\r\n  W: number,\r\n  H: number,\r\n  xPercent: number,\r\n  yPercent: number,\r\n  borderPercent: number\r\n): Point {\r\n  // Calculate the width and height of the inner area\r\n  const innerWidth = calculateInnerWidth(W, borderPercent);\r\n  const innerHeight = calculateInnerWidth(H, borderPercent); // Assuming the same border percentage for height\r\n\r\n  // Calculate the x-coordinate based on the percentage of the inner width\r\n  const x = Math.floor((xPercent / 100) * innerWidth - innerWidth / 2);\r\n\r\n  // Calculate the y-coordinate based on the percentage of the inner height\r\n  const y = Math.floor((yPercent / 100) * innerHeight - innerHeight / 2);\r\n\r\n  // Return the point coordinate\r\n  return new Point(x, y);\r\n}\r\n\r\n// // Example usage:\r\n// const canvasWidth = 100; // Total width of canvas\r\n// const canvasHeight = 80; // Total height of canvas\r\n// const borderPercentage = 10; // Percentage of border on each side\r\n// const xPercentage = 50; // Percentage from left\r\n// const yPercentage = 50; // Percentage from bottom\r\n\r\n// const pointCoordinate = calculatePointCoordinate(\r\n//   canvasWidth,\r\n//   canvasHeight,\r\n//   xPercentage,\r\n//   yPercentage,\r\n//   borderPercentage\r\n// );\r\n// console.log('Point Coordinate:', pointCoordinate);\r\n\r\nfunction calculateInnerWidth(W: number, x: number): number {\r\n  const totalBorderPercentage = 2 * x;\r\n  const innerPercentage = 100 - totalBorderPercentage;\r\n  const innerWidth = (innerPercentage / 100) * W;\r\n  return innerWidth;\r\n}\r\n\r\nfunction calculateLinePoints(p0: Point, p1: Point, numPoints: number): Point[] {\r\n  const linePoints: Point[] = [];\r\n\r\n  for (let i = 0; i < numPoints; i++) {\r\n    const t = i / (numPoints - 1);\r\n    const x = p0.x() * (1 - t) + p1.x() * t;\r\n    const y = p0.y() * (1 - t) + p1.y() * t;\r\n    linePoints.push(new Point(x, y));\r\n  }\r\n\r\n  return linePoints;\r\n}\r\n\r\n// Example usage:\r\nconst canvasWidth = 100; // Total width of canvas\r\nconst canvasHeight = 80; // Total height of canvas\r\nconst borderPercentage = 10; // Percentage of border on each side\r\nconst p0PercentageX = 20; // Percentage of x-coordinate for p0\r\nconst p0PercentageY = 30; // Percentage of y-coordinate for p0\r\nconst p1PercentageX = 80; // Percentage of x-coordinate for p1\r\nconst p1PercentageY = 70; // Percentage of y-coordinate for p1\r\nconst numPoints = 5; // Number of points on the line\r\n\r\nconst p0 = calculatePointCoordinate(\r\n  canvasWidth,\r\n  canvasHeight,\r\n  p0PercentageX,\r\n  p0PercentageY,\r\n  borderPercentage\r\n);\r\nconst p1 = calculatePointCoordinate(\r\n  canvasWidth,\r\n  canvasHeight,\r\n  p1PercentageX,\r\n  p1PercentageY,\r\n  borderPercentage\r\n);\r\n\r\nconst linePoints = calculateLinePoints(p0, p1, numPoints);\r\nconsole.log('Line Points:', linePoints);\r\n"]}