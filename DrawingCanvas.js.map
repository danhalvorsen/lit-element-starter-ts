{"version":3,"file":"DrawingCanvas.js","sourceRoot":"","sources":["src/DrawingCanvas.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAC,gBAAgB,EAAmB,MAAM,2BAA2B,CAAC;AAE7E,mBAAmB;AAGZ,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,UAAU;IAK3C;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;QACrC,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC;IACjD,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA,qCAAqC,CAAC;IACnD,CAAC;IACD,gCAAgC;IAChC,iBAAiB;IACjB,IAAI;IACK,YAAY;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IACD,MAAM;QACJ,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,cAAc,CAC5C,YAAY,CACe,CAAC;QAE9B,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YAC5C,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,OAAO;QACT,CAAC;QAED,MAAM,GAAG,GAAoC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;QACrE,CAAC;QAED,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC;QAC/B,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7B,GAAG,CAAC,SAAS,GAAG,oBAAoB,CAAC;QACrC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC/B,CAAC;CACF,CAAA;AAhDY,aAAa;IADzB,aAAa,CAAC,eAAe,CAAC;GAClB,aAAa,CAgDzB","sourcesContent":["import {LitElement, html} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport {LineCreator} from './visuals/LineCreator';\r\nimport {Point} from './types';\r\nimport {RectangleCreator, RectangleProduct} from './visuals/RectagleCreator';\r\n\r\n// DrawingCanvas.ts\r\n\r\n@customElement('canvas-drawer')\r\nexport class DrawingCanvas extends LitElement {\r\n  // methods related to canvas drawing\r\n  private lineCreator!: LineCreator;\r\n  private rectangleCreator!: RectangleCreator;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.lineCreator = new LineCreator();\r\n    this.rectangleCreator = new RectangleCreator();\r\n  }\r\n\r\n  override render() {\r\n    return html` <canvas id=\"newcanvas2\"></canvas> `;\r\n  }\r\n  // override createRenderRoot() {\r\n  //   return this;\r\n  // }\r\n  override firstUpdated() {\r\n    this.redraw();\r\n  }\r\n  redraw(): void {\r\n    const canvas = this.shadowRoot?.getElementById(\r\n      'newcanvas2'\r\n    ) as HTMLCanvasElement | null;\r\n\r\n    if (canvas === null || canvas === undefined) {\r\n      console.log('no canvas element found');\r\n      return;\r\n    }\r\n\r\n    const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d');\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n\r\n    if (this.lineCreator) {\r\n      this.lineCreator.create(new Point(0, 0), new Point(100, 100), ctx);\r\n    }\r\n\r\n    ctx.fillStyle = 'rgb(200 0 0)';\r\n    ctx.fillRect(10, 10, 50, 50);\r\n\r\n    ctx.fillStyle = 'rgb(0 0 200 / 50%)';\r\n    ctx.fillRect(30, 30, 50, 50);\r\n  }\r\n}\r\n"]}