{"version":3,"file":"canvas.js","sourceRoot":"","sources":["src/canvas.ts"],"names":[],"mappings":"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","sourcesContent":["// import {html, css, LitElement} from 'lit';\r\n// import {customElement, query} from 'lit/decorators.js';\r\n\r\n// type DragType = 'none' | 'canvas' | 'element';\r\n// type SupportedNode = HTMLElement | SVGElement;\r\n\r\n// @customElement('css-canvas')\r\n// export class CSSCanvas extends LitElement {\r\n//   @query('main') root!: HTMLElement;\r\n//   @query('#children') container!: HTMLElement;\r\n//   @query('canvas') canvas!: HTMLCanvasElement;\r\n//   dragType: DragType = 'none';\r\n//   offset: Offset = {x: 0, y: 0};\r\n//   pointerMap: Map<number, PointerData> = new Map();\r\n\r\n//   static override readonly styles = css`\r\n//     :host {\r\n//       --offset-x: 0;\r\n//       --offset-y: 0;\r\n//       --grid-background-color: white;\r\n//       --grid-color: black;\r\n//       --grid-size: 40px;\r\n//       --grid-dot-size: 1px;\r\n//     }\r\n//     main {\r\n//       overflow: hidden;\r\n//     }\r\n//     canvas {\r\n//       background-size: var(--grid-size) var(--grid-size);\r\n//       background-image: radial-gradient(\r\n//         circle,\r\n//         var(--grid-color) var(--grid-dot-size),\r\n//         var(--grid-background-color) var(--grid-dot-size)\r\n//       );\r\n//       background-position: var(--offset-x) var(--offset-y);\r\n//       z-index: 0;\r\n//     }\r\n//     .full-size {\r\n//       width: 100%;\r\n//       height: 100%;\r\n//       position: fixed;\r\n//     }\r\n//     .child {\r\n//       --dx: 0px;\r\n//       --dy: 0px;\r\n//       position: fixed;\r\n//       flex-shrink: 1;\r\n//       z-index: var(--layer, 0);\r\n//       transform: translate(var(--dx), var(--dy));\r\n//     }\r\n//     @media (prefers-color-scheme: dark) {\r\n//       main {\r\n//         --grid-background-color: black;\r\n//         --grid-color: grey;\r\n//       }\r\n//     }\r\n//   `;\r\n\r\n//   override render() {\r\n//     console.log('render');\r\n//     return html`\r\n//       <main class=\"full-size\">\r\n//         <canvas class=\"full-size\"></canvas>\r\n//         <div id=\"children\" class=\"full-size\"></div>\r\n//       </main>\r\n//     `;\r\n//   }\r\n\r\n//   handleDown(event: PointerEvent, type: DragType) {\r\n//     if (this.dragType === 'none') {\r\n//       event.preventDefault();\r\n//       this.dragType = type;\r\n//       (event.target as Element).setPointerCapture(event.pointerId);\r\n//       this.pointerMap.set(event.pointerId, {\r\n//         id: event.pointerId,\r\n//         startPos: {x: event.clientX, y: event.clientY},\r\n//         currentPos: {x: event.clientX, y: event.clientY},\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   handleMove(\r\n//     event: PointerEvent,\r\n//     type: DragType,\r\n//     onMove: (delta: Offset) => void\r\n//   ) {\r\n//     if (this.dragType === type) {\r\n//       event.preventDefault();\r\n//       const saved = this.pointerMap.get(event.pointerId)!;\r\n//       const current = {...saved.currentPos};\r\n//       saved.currentPos = {x: event.clientX, y: event.clientY};\r\n//       const delta = {\r\n//         x: saved.currentPos.x - current.x,\r\n//         y: saved.currentPos.y - current.y,\r\n//       };\r\n//       onMove(delta);\r\n//     }\r\n//   }\r\n\r\n//   handleUp(event: PointerEvent) {\r\n//     this.dragType = 'none';\r\n//     (event.target as Element).releasePointerCapture(event.pointerId);\r\n//   }\r\n\r\n//   moveCanvas(delta: Offset) {\r\n//     this.offset.x += delta.x;\r\n//     this.offset.y += delta.y;\r\n//     this.root.style.setProperty('--offset-x', `${this.offset.x}px`);\r\n//     this.root.style.setProperty('--offset-y', `${this.offset.y}px`);\r\n//   }\r\n\r\n//   moveElement(child: SupportedNode, delta: Offset) {\r\n//     const getNumber = (key: '--dx' | '--dy', fallback: number) => {\r\n//       const saved = child.style.getPropertyValue(key);\r\n//       if (saved.length > 0) {\r\n//         return parseFloat(saved.replace('px', ''));\r\n//       }\r\n//       return fallback;\r\n//     };\r\n//     const dx = getNumber('--dx', 0) + delta.x;\r\n//     const dy = getNumber('--dy', 0) + delta.y;\r\n//     child.style.transform = `translate(${dx}px, ${dy}px)`;\r\n//     child.style.setProperty('--dx', `${dx}px`);\r\n//     child.style.setProperty('--dy', `${dy}px`);\r\n//   }\r\n\r\n//   /**\r\n//    * Method to update the first render of the component.\r\n//    *\r\n//    * @return {Promise<void>} A promise that resolves when the update is complete\r\n//    */\r\n//   override async firstUpdated() {\r\n//     const items = Array.from(this.childNodes);\r\n//     let i = 0;\r\n//     for (const node of items) {\r\n//       if (node instanceof SVGElement || node instanceof HTMLElement) {\r\n//         const child = node as SupportedNode;\r\n//         child.classList.add('child');\r\n//         child.style.setProperty('--layer', `${i}`);\r\n//         this.container.append(child);\r\n//         child.addEventListener('pointerdown', (e: any) => {\r\n//           this.handleDown(e, 'element');\r\n//         });\r\n//         child.addEventListener('pointermove', (e: any) => {\r\n//           this.handleMove(e, 'element', (delta) => {\r\n//             this.moveElement(child, delta);\r\n//           });\r\n//         });\r\n//         i++;\r\n//       }\r\n//     }\r\n//     this.requestUpdate();\r\n//     this.root.addEventListener('pointerdown', (e: any) => {\r\n//       this.handleDown(e, 'canvas');\r\n//     });\r\n\r\n//     this.root.addEventListener('pointermove', (e: any) => {\r\n//       this.handleMove(e, 'canvas', (delta) => {\r\n//         this.moveCanvas(delta);\r\n//         for (const node of Array.from(this.container.children)) {\r\n//           if (node instanceof SVGElement || node instanceof HTMLElement) {\r\n//             this.moveElement(node, delta);\r\n//           }\r\n//         }\r\n//       });\r\n//     });\r\n//     this.root.addEventListener('pointerup', (e: any) => {\r\n//       this.handleUp(e);\r\n//     });\r\n//   }\r\n// }\r\n\r\n// interface Offset {\r\n//   x: number;\r\n//   y: number;\r\n// }\r\n\r\n// interface PointerData {\r\n//   id: number;\r\n//   startPos: Offset;\r\n//   currentPos: Offset;\r\n// }\r\n"]}